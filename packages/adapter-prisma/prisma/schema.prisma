datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String               @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    OrganizationMember OrganizationMember[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}

model Organization {
    id                     String                   @id @default(cuid())
    slug                   String                   @unique
    name                   String
    description            String?
    image                  String?
    type                   String                   @default("team") // By default,set to "team" unless you enable the "personalOrganization" option in the configuration which will make the default personal. You can change the type to any value you want, but if you set it to "personal", the user won't be able to add more members. Ofcourse you can also change that behviour through the config by setting "multipleMembers" true on the "personalOrganization" option.
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    OrganizationMember     OrganizationMember[]
    OrganizationInvitation OrganizationInvitation[]
}

model OrganizationMember {
    id        String   @id @default(cuid())
    userId    String
    email     String
    orgId     String
    name      String?
    role      String   @default("member") // member, admin, owner
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organization Organization @relation(fields: [orgId], references: [slug], onDelete: Cascade)
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, orgId])
}

model OrganizationInvitation {
    id        String   @id @default(cuid())
    email     String
    orgId     String
    token     String   @unique
    status    String   @default("pending") // pending, accepted, rejected, expired
    role      String   @default("member") // member, admin, owner
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organization Organization @relation(fields: [orgId], references: [slug], onDelete: Cascade)
}
