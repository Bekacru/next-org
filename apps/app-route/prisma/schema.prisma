generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?            @map("email_verified")
    image              String?
    accounts           Account[]
    sessions           Session[]
    OrganizationMember OrganizationMember[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Organization {
    id                     String                   @id @default(cuid())
    slug                   String                   @unique
    name                   String
    description            String?
    image                  String?
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    OrganizationMember     OrganizationMember[]
    OrganizationInvitation OrganizationInvitation[]
}

model OrganizationMember {
    id        String   @id @default(cuid())
    userId    String
    email     String
    name      String?
    orgId     String
    role      String   @default("member") // member, admin, owner
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organization Organization @relation(fields: [orgId], references: [slug], onDelete: Cascade)
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, orgId])
}

model OrganizationInvitation {
    id        String   @id @default(cuid())
    email     String
    orgId     String
    token     String   @unique
    status    String   @default("pending") // pending, accepted, rejected, expired
    role      String   @default("member") // member, admin, owner
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    organization Organization @relation(fields: [orgId], references: [slug], onDelete: Cascade)
}
